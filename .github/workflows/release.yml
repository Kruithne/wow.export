name: Create Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (semver format)'
        required: true
        type: string

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  validate-version:
    runs-on: ubuntu-latest
    steps:
      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version '${{ github.event.inputs.version }}' is not a valid semver version."
            exit 1
          fi

  update-versions:
    needs: validate-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Update GUI version
        run: |
          cd gui
          sed -i 's/"version": ".*"/"version": "${{ github.event.inputs.version }}"/' package.json

      - name: Update CLI version
        run: |
          cd cli
          sed -i 's/<Version>.*<\/Version>/<Version>${{ github.event.inputs.version }}<\/Version>/' cli.csproj
          sed -i 's/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${{ github.event.inputs.version }}.0<\/AssemblyVersion>/' cli.csproj
          sed -i 's/<FileVersion>.*<\/FileVersion>/<FileVersion>${{ github.event.inputs.version }}.0<\/FileVersion>/' cli.csproj

      - name: Update Core version
        run: |
          cd core
          sed -i 's/<Version>.*<\/Version>/<Version>${{ github.event.inputs.version }}<\/Version>/' core.csproj
          sed -i 's/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${{ github.event.inputs.version }}.0<\/AssemblyVersion>/' core.csproj
          sed -i 's/<FileVersion>.*<\/FileVersion>/<FileVersion>${{ github.event.inputs.version }}.0<\/FileVersion>/' core.csproj

      - name: Update Updater version
        run: |
          cd updater
          sed -i 's/<Version>.*<\/Version>/<Version>${{ github.event.inputs.version }}<\/Version>/' updater.csproj
          sed -i 's/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${{ github.event.inputs.version }}.0<\/AssemblyVersion>/' updater.csproj
          sed -i 's/<FileVersion>.*<\/FileVersion>/<FileVersion>${{ github.event.inputs.version }}.0<\/FileVersion>/' updater.csproj

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit version changes
        run: |
          git add gui/package.json cli/cli.csproj core/core.csproj updater/updater.csproj
          git commit -m "Release ${{ github.event.inputs.version }}"
          git push

  build:
    needs: update-versions
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win32
            runtime: win-x64
            arch: x64
            cli-ext: .exe
          - os: windows-latest
            platform: win32
            runtime: win-arm64
            arch: arm64
            cli-ext: .exe
          - os: ubuntu-latest
            platform: linux
            runtime: linux-x64
            arch: x64
            cli-ext: ''
          - os: ubuntu-latest
            platform: linux
            runtime: linux-arm64
            arch: arm64
            cli-ext: ''
          - os: macos-latest
            platform: darwin
            runtime: osx-x64
            arch: x64
            cli-ext: ''
          - os: macos-14
            platform: darwin
            runtime: osx-arm64
            arch: arm64
            cli-ext: ''
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build Core
        run: bun build_core.js

      - name: Build Updater
        run: bun build_updater.js

      - name: Build CLI
        run: bun build_cli.js

      - name: Create CLI-Only Package
        shell: bash
        run: |
          # Create CLI-only package name
          if [ "${{ matrix.platform }}" = "win32" ]; then
            CLI_ONLY_NAME="wow_export_cli_only_win32_${{ matrix.arch }}"
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            CLI_ONLY_NAME="wow_export_cli_only_linux_${{ matrix.arch }}"
          else
            CLI_ONLY_NAME="wow_export_cli_only_darwin_${{ matrix.arch }}"
          fi
          
          # Create CLI-only ZIP file from dist/out contents (core + CLI only)
          cd dist
          if [ "${{ matrix.platform }}" = "win32" ]; then
            powershell Compress-Archive -Path "out/*" -DestinationPath "$CLI_ONLY_NAME.zip"
          else
            cd out && zip -r "../$CLI_ONLY_NAME.zip" . && cd ..
          fi

      - name: Upload CLI-Only artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wow_export_cli_only_${{ matrix.platform }}_${{ matrix.arch }}
          path: dist/wow_export_cli_only_${{ matrix.platform }}_${{ matrix.arch }}.zip

      - name: Build GUI
        run: bun build_gui.js

      - name: Create Release Package
        shell: bash
        run: |
          # Create final package name
          if [ "${{ matrix.platform }}" = "win32" ]; then
            FINAL_NAME="wow_export_win32_${{ matrix.arch }}"
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            FINAL_NAME="wow_export_linux_${{ matrix.arch }}"
          else
            FINAL_NAME="wow_export_darwin_${{ matrix.arch }}"
          fi
          
          # Create ZIP file from dist/out contents
          cd dist
          if [ "${{ matrix.platform }}" = "win32" ]; then
            powershell Compress-Archive -Path "out/*" -DestinationPath "$FINAL_NAME.zip"
          else
            cd out && zip -r "../$FINAL_NAME.zip" . && cd ..
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wow_export_${{ matrix.platform }}_${{ matrix.arch }}
          path: dist/wow_export_${{ matrix.platform }}_${{ matrix.arch }}.zip

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          draft: false
          prerelease: false

      - name: Upload Windows x64 CLI-Only Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/wow_export_cli_only_win32_x64/wow_export_cli_only_win32_x64.zip
          asset_name: wow_export_cli_only_win32_x64.zip
          asset_content_type: application/zip

      - name: Upload Windows ARM64 CLI-Only Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/wow_export_cli_only_win32_arm64/wow_export_cli_only_win32_arm64.zip
          asset_name: wow_export_cli_only_win32_arm64.zip
          asset_content_type: application/zip

      - name: Upload Linux x64 CLI-Only Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/wow_export_cli_only_linux_x64/wow_export_cli_only_linux_x64.zip
          asset_name: wow_export_cli_only_linux_x64.zip
          asset_content_type: application/zip

      - name: Upload Linux ARM64 CLI-Only Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/wow_export_cli_only_linux_arm64/wow_export_cli_only_linux_arm64.zip
          asset_name: wow_export_cli_only_linux_arm64.zip
          asset_content_type: application/zip

      - name: Upload macOS x64 CLI-Only Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/wow_export_cli_only_darwin_x64/wow_export_cli_only_darwin_x64.zip
          asset_name: wow_export_cli_only_darwin_x64.zip
          asset_content_type: application/zip

      - name: Upload macOS ARM64 CLI-Only Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/wow_export_cli_only_darwin_arm64/wow_export_cli_only_darwin_arm64.zip
          asset_name: wow_export_cli_only_darwin_arm64.zip
          asset_content_type: application/zip

      - name: Upload Windows x64 Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/wow_export_win32_x64/wow_export_win32_x64.zip
          asset_name: wow_export_win32_x64.zip
          asset_content_type: application/zip

      - name: Upload Windows ARM64 Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/wow_export_win32_arm64/wow_export_win32_arm64.zip
          asset_name: wow_export_win32_arm64.zip
          asset_content_type: application/zip

      - name: Upload Linux x64 Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/wow_export_linux_x64/wow_export_linux_x64.zip
          asset_name: wow_export_linux_x64.zip
          asset_content_type: application/zip

      - name: Upload Linux ARM64 Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/wow_export_linux_arm64/wow_export_linux_arm64.zip
          asset_name: wow_export_linux_arm64.zip
          asset_content_type: application/zip

      - name: Upload macOS x64 Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/wow_export_darwin_x64/wow_export_darwin_x64.zip
          asset_name: wow_export_darwin_x64.zip
          asset_content_type: application/zip

      - name: Upload macOS ARM64 Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/wow_export_darwin_arm64/wow_export_darwin_arm64.zip
          asset_name: wow_export_darwin_arm64.zip
          asset_content_type: application/zip